<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 无双</title>
    <link>https://leaxoy.github.io/tags/go/</link>
    <description>Recent content in Go on 无双</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 12 Dec 2019 13:37:48 +0800</lastBuildDate>
    
	<atom:link href="https://leaxoy.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入Go HTTP库 - Server</title>
      <link>https://leaxoy.github.io/2019/12/go-deep-std-http-server/</link>
      <pubDate>Thu, 12 Dec 2019 13:37:48 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/go-deep-std-http-server/</guid>
      <description>代码分析基于Go1.13.4版本，不同版本间可能略有不同，但处理流程是一致的。 基本使用 Go内置了HTTP服务器，用户可以很方便的开发HTTP</description>
    </item>
    
    <item>
      <title>Go json使用的奇技淫巧</title>
      <link>https://leaxoy.github.io/2019/12/go-advanced-json/</link>
      <pubDate>Thu, 12 Dec 2019 12:09:45 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/go-advanced-json/</guid>
      <description>基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import &amp;#34;encoding/json&amp;#34; type A struct { B int C string } func main() { buf, err := json.Marshal(A{B: 1, C: &amp;#34;Hello&amp;#34;}) if err != nil { panic(err) } println(string(buf)) } 修改结果中的key值 1 2 3 4 5 6 package main</description>
    </item>
    
  </channel>
</rss>