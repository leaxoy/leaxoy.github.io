<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 无双</title>
    <link>https://leaxoy.github.io/posts/</link>
    <description>Recent content in Posts on 无双</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 10 Mar 2020 12:37:36 +0800</lastBuildDate>
    
	<atom:link href="https://leaxoy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust异步浅谈</title>
      <link>https://leaxoy.github.io/2020/03/rust-async-runtime/</link>
      <pubDate>Tue, 10 Mar 2020 12:37:36 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2020/03/rust-async-runtime/</guid>
      <description>前提 这篇文章主要描述了Rust中异步的原理，Rust异步也是在最近的版本中(1.39)中才稳定下来。希望可以通过这边文章在提高自己认知的情况</description>
    </item>
    
    <item>
      <title>Go语言并发安全与不安全</title>
      <link>https://leaxoy.github.io/2019/12/go-concurrent-saft-and-unsafe/</link>
      <pubDate>Thu, 26 Dec 2019 12:30:08 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/go-concurrent-saft-and-unsafe/</guid>
      <description>在开发过程中，我们难免要跨线程/协程进行数据的访问与修改，由此便会产生数据安全性问题，那么对于号称高并发，高性能的go语言来说，又会是怎么样</description>
    </item>
    
    <item>
      <title>Rust初探</title>
      <link>https://leaxoy.github.io/2019/12/rust-startup/</link>
      <pubDate>Mon, 16 Dec 2019 20:19:16 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/rust-startup/</guid>
      <description>看到这个标题，可能要有人问了，现在的编程语言已经那么多了，为什么还要在学一门，再学一门可以让我涨工资吗，这个语言比现有的语言好在哪里呢？这个</description>
    </item>
    
    <item>
      <title>Go实现Mqtt broker</title>
      <link>https://leaxoy.github.io/2019/12/mqtt-implement-in-go/</link>
      <pubDate>Mon, 16 Dec 2019 15:26:29 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/mqtt-implement-in-go/</guid>
      <description>MQTT broker的主要作用有两个，处理Publisher发布的消息，将消息投递给对应的Subscriber。 服务器的设计因此也分为几个模块： S</description>
    </item>
    
    <item>
      <title>Mqtt协议解析</title>
      <link>https://leaxoy.github.io/2019/12/mqtt-protocol/</link>
      <pubDate>Mon, 16 Dec 2019 15:26:17 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/mqtt-protocol/</guid>
      <description>这篇属于IM三剑客中的第二篇，前面一篇主要讲解了通用IM的一些架构的知识，这边主要讲解MQTT协议的细节，最后一篇将会着重介绍了MQTT Br</description>
    </item>
    
    <item>
      <title>并发模型解析</title>
      <link>https://leaxoy.github.io/2019/12/concurrent-model-overview/</link>
      <pubDate>Sun, 15 Dec 2019 17:04:36 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/concurrent-model-overview/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Flutter Startup</title>
      <link>https://leaxoy.github.io/2019/12/flutter-startup/</link>
      <pubDate>Sat, 14 Dec 2019 18:17:35 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/flutter-startup/</guid>
      <description>之前一直想独立完成一个产品，奈何每次都死在了客户端上，iOS/Android两个主要的平台各自为战，学习两套对于后端来说几乎是不太可能的，虽</description>
    </item>
    
    <item>
      <title>深入Go标准库之 Database</title>
      <link>https://leaxoy.github.io/2019/12/go-deep-std-database/</link>
      <pubDate>Sat, 14 Dec 2019 11:22:52 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/go-deep-std-database/</guid>
      <description>很多应用都离不开数据库的访问与操作，在JAVA中，我们通常使用Mybatis来进行数据库操作，在Python中，通常会使用SQLAlchem</description>
    </item>
    
    <item>
      <title>通用IM架构</title>
      <link>https://leaxoy.github.io/2019/12/im-architecture/</link>
      <pubDate>Thu, 12 Dec 2019 16:27:11 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/im-architecture/</guid>
      <description>这篇属于IM三剑客中的一篇，后面两篇主要着重介绍了MQTT协议以及MQTT Broker的Go语言实现，如果没有这类需求的话可以跳过。 Mqtt</description>
    </item>
    
    <item>
      <title>Go Awesome</title>
      <link>https://leaxoy.github.io/2019/12/go-awesome-library/</link>
      <pubDate>Thu, 12 Dec 2019 15:39:53 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/go-awesome-library/</guid>
      <description>虽然网上已经有了大量的Awesome相关的资源了，这里为什么还要再来一份呢，原因是网上的虽然大而全，但是很多都是耳熟能详的库，有些库会被埋没</description>
    </item>
    
    <item>
      <title>深入Go标准库之 HTTP - Server</title>
      <link>https://leaxoy.github.io/2019/12/go-deep-std-http-server/</link>
      <pubDate>Thu, 12 Dec 2019 13:37:48 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/go-deep-std-http-server/</guid>
      <description>代码分析基于Go1.13.4版本，不同版本间可能略有不同，但处理流程是一致的。 基本使用 Go内置了HTTP服务器，用户可以很方便的开发HTTP</description>
    </item>
    
    <item>
      <title>Go json使用的奇技淫巧</title>
      <link>https://leaxoy.github.io/2019/12/go-advanced-json/</link>
      <pubDate>Thu, 12 Dec 2019 12:09:45 +0800</pubDate>
      
      <guid>https://leaxoy.github.io/2019/12/go-advanced-json/</guid>
      <description>基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import &amp;#34;encoding/json&amp;#34; type A struct { B int C string } func main() { buf, err := json.Marshal(A{B: 1, C: &amp;#34;Hello&amp;#34;}) if err != nil { panic(err) } println(string(buf)) } 修改结果中的key值 1 2 3 4 5 6 package main</description>
    </item>
    
  </channel>
</rss>